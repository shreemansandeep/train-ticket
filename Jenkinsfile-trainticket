pipeline{
  agent any
    stages{
    
      stage("Git Checkout"){
        steps{
              git credentialsId: 'GitID', url: 'https://github.com/shreemansandeep/Train-Ticket-Reservation-System.git'
        }
      }
      
      stage("Unit testing"){
       steps{
              sh 'mvn test'
             }
        }
        
      stage("Integration testing"){
                steps{
                      sh 'mvn verify -DskipUnitTests'
                }
        }

      stage("Maven Build"){
      steps{
          sh "mvn clean install"
  
    }
}

stage("Static code analysis"){
      steps{
      script{
          withSonarQubeEnv(credentialsId: 'sonartoken') {
          sh "mvn clean package sonar:sonar"
          }
        }
    }
}

stage("Quality Gate Status"){
    steps{
    script{
          waitForQualityGate abortPipeline: false, credentialsId: 'sonartoken'
          }
        }
    }
    
    stage("Upload War To Nexus"){
      steps{
        script{
        
        def pom = readMavenPom file: 'pom.xml'
                
        def nexusRepo = pom.version.endsWith("SNAPSHOT") ? "train-snapshot" : "train-release"
        
        nexusArtifactUploader artifacts: [
        [
        artifactId: 'TrainBook', 
        classifier: '', 
        file: 'target/trainticketsystem.war', 
        type: 'war'
        ]
        ], 
        credentialsId: 'nexus-auth', 
        groupId: 'TrainBook', 
        nexusUrl: '3.109.184.120:8081', 
        nexusVersion: 'nexus3', 
        protocol: 'http', 
        repository: nexusRepo, 
        version: "${pom.version}"
        }
      }
    }
    
    stage("Docker Build image and Tag"){
            steps{
                  sh 'docker image build -t $JOB_NAME:v1.$BUILD_ID .'
                  sh 'docker image tag $JOB_NAME:v1.$BUILD_ID dockersandheep/$JOB_NAME:v1.$BUILD_ID'
                  sh 'docker image tag $JOB_NAME:v1.$BUILD_ID dockersandheep/$JOB_NAME:latest'
            }
            }
            
     stage("Push image to Docker Hub"){
            steps{
                  withCredentials([string(credentialsId: 'DockerHpwd', variable: 'DockerHubPwd')]) {
                  sh 'docker login -u dockersandheep -p ${DockerHubPwd}'
                  sh 'docker push dockersandheep/$JOB_NAME:v1.$BUILD_ID'
                  sh 'docker push dockersandheep/$JOB_NAME:latest'
            }   
            }
            }  


      
    }
    
   /*  stage('Notification') {
  steps {
    script {
      emailext (
        to: "recipient@example.com",
        subject: "Jenkins Pipeline Notification: ${currentBuild.currentResult}",
        body: "The pipeline has completed with a status of ${currentBuild.currentResult}.\n\nPlease check the pipeline for more details.",
        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
      )
    }
  }
}  */

post {
    success {
      mail to: "shreemansandeep@gmail.com", 
      subject:"BUILD SUCCESS: ${currentBuild.fullDisplayName}", 
      body: "More Info can be found here: ${env.BUILD_URL}."
    }
    failure {
      mail to: "shreemansandeep@gmail.com", 
      subject:"BUILD FAILURE: ${currentBuild.fullDisplayName}", 
      body: "More Info can be found here: ${env.BUILD_URL}."
    }
  }
  
}
