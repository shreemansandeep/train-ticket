pipeline{
agent any
environment {
        AWS_ACCOUNT_ID="436312201622"
        AWS_DEFAULT_REGION="ap-south-1"
        IMAGE_REPO_NAME="trainticket-ecr"
        IMAGE_TAG="v1"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
    }

  stages{
  
  stage(‘Logging into AWS ECR’) {
        steps {
           script {
                sh “aws ecr get-login-password — region ${AWS_DEFAULT_REGION} | docker login — username AWS — password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com”
                    }
                      }
                       }


    stage("Git Checkout"){
      steps{            
              git credentialsId: 'GitID', url: 'https://github.com/shreemansandeep/Train-Ticket-Reservation-System.git'
              }
           }
           
     stage("Unit testing"){
      steps{
              sh 'mvn test'
              }
           }
           
     stage("Inregration testing"){
        steps{
              sh 'mvn verify -DskipUnitTests'
            }
          }     
          
       stage("Maven Build"){
        steps{
              sh 'mvn clean install'
            }
          }   
          
          stage('Building image') {
      steps{
        script {
          dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
        }
      }
    }
    
    
   
    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
     steps{  
         script {
                sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
                sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
         }
        }
      }
          
          /*
          stage("Docker Build image and Tag"){
            steps{
                  sh 'docker image build -t $JOB_NAME:v1.$BUILD_ID .'
                 // sh 'docker image tag $JOB_NAME:v1.$BUILD_ID dockersandheep/$JOB_NAME:v1.$BUILD_ID'
                 // sh 'docker image tag $JOB_NAME:v1.$BUILD_ID dockersandheep/$JOB_NAME:latest'
            }
            }
            
            stage("Pushing to ECR") {
              steps{  
                script{
                    withDockerRegistry(credentialsId: 'ecr:ap-south-1:AwsCred', url: '436312201622.dkr.ecr.ap-south-1.amazonaws.com/trainticket-ecr') {
                    sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                    }
                }
        }
      }
      
            
            stage("Pushing to ECR") {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'ecr:ap-south-1:AwsCred', url: '436312201622.dkr.ecr.ap-south-1.amazonaws.com/trainticket-ecr') {
                    app.push("${env.BUILD_NUMBER}")
                    app.push("latest")
                    }
                }
            }
        }
        
            
     stage("Push image to Docker Hub"){
            steps{
                  withCredentials([string(credentialsId: 'DockerHpwd', variable: 'DockerHubPwd')]) {
                  sh 'docker login -u dockersandheep -p ${DockerHubPwd}'
                  sh 'docker push dockersandheep/$JOB_NAME:v1.$BUILD_ID'
                  sh 'docker push dockersandheep/$JOB_NAME:latest'
            }   
            }
            }  
            
            stage("k8s Deploy"){
              steps{
                  script{
                        kubernetesDeploy (configs: 'k8s-ttdepsvc.yml', kubeconfigId: 'k8sconfig-deploy')
                  }
              }
           }
           */

        }
    }
